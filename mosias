#!/usr/bin/env python3

import csv
import time

import click
import mido

NOTE_OFFSETS = {
    "C": 0,
    "C#": 1,
    "DB": 1,
    "D": 2,
    "D#": 3,
    "EB": 3,
    "E": 4,
    "F": 5,
    "F#": 6,
    "GB": 6,
    "G": 7,
    "G#": 8,
    "AB": 8,
    "A": 9,
    "A#": 10,
    "BB": 10,
    "B": 11,
}

def validate_port(port):
    outports = mido.get_output_names()
    if port:
        if port in outports:
            return port
        raise RuntimeError(f"Port: {port} does not exist")
    if len(outports) > 0:
        print(f"Using port: {outports[0]}")
        return outports[0]
    raise RuntimeError(f"No output ports available")

@click.command
@click.argument('filename', type=click.Path(exists=True))
@click.option('-p', '--port', default=None, show_default=False)
@click.option('-o', '--offset', type=int, default=0)
def run(filename, port, offset):
    cfg = {"BASE TIME": 1, "PORT": None}
    with open(filename) as fin:
        reader = csv.reader(fin)
        for row in reader:
            if row[0] in cfg:
                cfg[row[0]] = row[1]
            elif row[0].upper() == 'GO':
                break
        seconds_per_row = (1/150) * 60 * 1/8 * float(cfg["BASE TIME"])
        port = validate_port(port or cfg.get("PORT")) 
        state = [None for _ in range(16)]
        with mido.open_output(port) as outport:
            for row in reader:
                tstart = time.time()
                tend = tstart + seconds_per_row
                for channel, note in enumerate(row, start=1):
                    n = note.strip().upper()
                    if not n:
                        continue
                    if state[channel]:
                        msg = mido.Message(
                            "note_off",
                            channel=channel,
                            note=state[channel]
                            )
                        outport.send(msg)
                    if n == 'OFF':
                        state[channel] = None
                        continue
                    note, octave = n.split('-')    
                    note_num = 24 + int(octave) * 12 + NOTE_OFFSETS[note]
                    state[channel] = note_num
                    msg = mido.Message(
                        "note_on",
                        channel=channel,
                        note=note_num,
                        velocity=100,
                        )
                    outport.send(msg)
                time.sleep(tend - time.time()) 
            for c in range(16):
                if state[c]:
                    msg = mido.Message(
                        "note_off",
                        channel=c,
                        note=state[c]
                        )
                    outport.send(msg)
                

if __name__ == '__main__':
    run()
